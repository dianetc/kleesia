generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  moderator
  user
}

// System
model User {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  name              String
  role              Role?               @default(user)
  email             String              @unique
  status            String?             @default("offline")
  bio               String?             @default("Tell us about yourself..")
  // Relations
  account           Account?
  // 
  logs              Logs[]
  post              Post[]
  follows           Follows[]
  recovery          Recovery[]
  comments          Comments[]
  conference        Conference[]
  topic             Topic[]
  user_votes_post   User_Vote_Post[]
  User_Vote_Comment User_Vote_Comment[]
}

model Account {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  password String
  status   String? @default("active")

  // Relations
  session Session[]
  // 
  user    User      @relation(fields: [user_id], references: [id])
  user_id String    @unique
}

model Session {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?
  expiry     DateTime

  status     String? @default("active")
  token      String  @unique
  refresh_tk String

  // Relations
  account    Account? @relation(fields: [account_id], references: [id])
  account_id String?
}

model Recovery {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?
  expiry     DateTime

  token String @unique

  // Relations
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

model Logs {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  event   String
  message String
  status  String? @default("created")

  // Relations
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

// Main

model Post {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  title      String  @unique
  body       String?
  arxiv_link String? @unique
  votes      Int?    @default(0)

  // 
  co_authors  String[]
  conferences String[]

  // Relations
  user           User?            @relation(fields: [user_id], references: [id])
  user_id        String?
  // 
  Topic          Topic?           @relation(fields: [topic_id], references: [id])
  topic_id       String?
  // 
  User_Vote_Post User_Vote_Post[]
}

model User_Vote_Post {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  direction String?

  post    Post?   @relation(fields: [post_id], references: [id])
  post_id String?

  // Relations
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

model User_Vote_Comment {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  direction String?

  comment    Comments? @relation(fields: [comment_id], references: [id])
  comment_id String?

  // Relations
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

model Topic {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  title String? @unique
  rules Json[]

  // Relations
  post Post[]

  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

model Conference {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  title String? @unique

  // 
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

model Comments {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  body  String?
  votes Int?    @default(0)

  context    String?
  context_id String?

  // 
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?

  User_Vote_Comment User_Vote_Comment[]
}

model Follows {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime?

  context    String?
  context_id String?

  // Relations
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}
